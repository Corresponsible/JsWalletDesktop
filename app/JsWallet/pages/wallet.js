// Generated by LiveScript 1.6.0
(function(){
  var react, money, ref$, each, find, walletFuncs, getLang, icon, getPrimaryInfo, get, icons, roundHuman, alert, button, addressHolder, cb;
  react = require('react');
  money = require('../tools.js').money;
  ref$ = require('prelude-ls'), each = ref$.each, find = ref$.find;
  walletFuncs = require('../wallet-funcs.js');
  getLang = require('../get-lang.js');
  icon = require('./icon.js');
  getPrimaryInfo = require('../get-primary-info.js');
  get = require('../../web3t/providers/superagent.js').get;
  icons = require('../icons.js');
  roundHuman = require('../round-human.js');
  alert = require('./confirmation.js').alert;
  button = require('../components/button.js');
  addressHolder = require('../components/address-holder.js');
  cb = bind$(console, 'log');
  module.exports = curry$(function(store, web3t, wallets, wallet){
    var ref$, buttonStyle, uninstall, active, big, balance, balanceUsd, pending, send, receive, swap, expand, usdRate, last, lang, style, labelUninstall, walletStyle, borderStyle, border, buttonPrimary3Style, addressInput, btnIcon, iconColor, placeholder, placeholderCoin, name, receiveClick, sendClick, swapClick, token, tokenDisplay, makeDisabled, walletIsDisabled, isLoading, disabledClass, children;
    ref$ = walletFuncs(store, web3t, wallets, wallet), buttonStyle = ref$.buttonStyle, uninstall = ref$.uninstall, wallet = ref$.wallet, active = ref$.active, big = ref$.big, balance = ref$.balance, balanceUsd = ref$.balanceUsd, pending = ref$.pending, send = ref$.send, receive = ref$.receive, swap = ref$.swap, expand = ref$.expand, usdRate = ref$.usdRate, last = ref$.last;
    lang = getLang(store);
    style = getPrimaryInfo(store);
    labelUninstall = (function(){
      switch (false) {
      case !store.current.refreshing:
        return '...';
      default:
        return lang.hide + "";
      }
    }());
    walletStyle = {
      color: style.app.text
    };
    borderStyle = {
      borderBottom: "1px solid " + style.app.border
    };
    border = {
      borderTop: "1px solid " + style.app.border,
      borderRight: "1px solid " + style.app.border
    };
    buttonPrimary3Style = {
      border: "0",
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare
    };
    addressInput = {
      color: style.app.color3,
      background: style.app.bgPrimaryLight
    };
    btnIcon = {
      filter: style.app.btnIcon
    };
    iconColor = {
      filter: style.app.iconFilter
    };
    placeholder = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "placeholder";
      default:
        return "";
      }
    }());
    placeholderCoin = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "placeholder-coin";
      default:
        return "";
      }
    }());
    name = (ref$ = wallet.coin.name) != null
      ? ref$
      : wallet.coin.token;
    receiveClick = receive(wallet);
    sendClick = send(wallet);
    swapClick = swap(store, wallet);
    token = wallet.coin.token;
    tokenDisplay = ((ref$ = wallet.coin.nickname) != null ? ref$ : "").toUpperCase();
    makeDisabled = store.current.refreshing;
    walletIsDisabled = isNaN(wallet.balance);
    isLoading = store.current.refreshing === true;
    disabledClass = !isLoading && walletIsDisabled ? "disabled-wallet-item" : "";
    return react.createElement('div', {
      key: token + "",
      style: borderStyle,
      className: big + " " + disabledClass + " wallet wallet-item wallet252169339"
    }, children = [
      react.createElement('div', {
        onClick: expand,
        className: 'wallet-top'
      }, children = [
        react.createElement('div', {
          style: walletStyle,
          className: 'top-left'
        }, children = [
          react.createElement('div', {
            className: placeholderCoin + " img"
          }, children = react.createElement('img', {
            src: wallet.coin.image + ""
          })), react.createElement('div', {
            className: 'info'
          }, children = [
            react.createElement('div', {
              className: placeholder + " balance title"
            }, ' ' + name), store.current.device === 'desktop' ? react.createElement('div', {
              title: wallet.balance + "",
              className: placeholder + " price token"
            }, children = [react.createElement('span', {}, ' ' + roundHuman(wallet.balance)), react.createElement('span', {}, ' ' + tokenDisplay)]) : void 8, react.createElement('div', {
              title: balanceUsd + "",
              className: placeholder + " price"
            }, children = [react.createElement('span', {}, ' ' + roundHuman(balanceUsd)), react.createElement('span', {}, ' USD')])
          ])
        ]), store.current.device === 'mobile' ? react.createElement('div', {
          style: walletStyle,
          className: 'top-middle'
        }, children = [
          +wallet.pendingSent === 0 ? react.createElement('div', {
            className: placeholder + " balance title"
          }, ' ' + name) : void 8, react.createElement('div', {
            className: placeholder + " balance"
          }, children = [
            react.createElement('span', {
              title: wallet.balance + ""
            }, ' ' + roundHuman(wallet.balance)), react.createElement('img', {
              src: wallet.coin.image + "",
              className: placeholderCoin + " label-coin"
            }), react.createElement('span', {}, ' ' + tokenDisplay), +wallet.pendingSent > 0 ? react.createElement('div', {
              className: 'pending'
            }, children = react.createElement('span', {}, ' -' + pending)) : void 8
          ])
        ]) : void 8, react.createElement('div', {
          className: 'top-right'
        }, children = [
          false && store.current.device === 'desktop' ? react.createElement('span', {
            onClick: expand,
            className: 'icon'
          }, children = react.createElement('img', {
            src: icons.arrowDown + "",
            style: iconColor,
            className: 'icon-svg-create'
          }, children = react.createElement('div', {}, ' expand'))) : void 8, button({
            store: store,
            onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : sendClick,
            text: 'send',
            icon: 'send',
            type: 'secondary'
          }), button({
            store: store,
            onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : receiveClick,
            text: 'receive',
            icon: 'get',
            type: 'primary'
          }), token === 'vlx' || token === 'vlx_native' || token === 'vlx2' || token === 'vlx_evm' || token === 'vlx_erc20' ? button({
            store: store,
            onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : swapClick,
            text: 'swap',
            icon: 'swap',
            id: "wallet-swap",
            makeDisabled: makeDisabled != null ? makeDisabled : false,
            classes: typeof classes != 'undefined' && classes !== null ? classes : "wallet-swap"
          }) : void 8
        ])
      ]), react.createElement('div', {
        style: border,
        className: 'wallet-middle'
      }, children = [
        addressHolder({
          store: store,
          wallet: wallet,
          type: 'bg'
        }), token !== 'btc' && token !== 'vlx' && token !== 'vlx_native' && token !== 'vlx2' ? react.createElement('div', {
          onClick: uninstall,
          style: walletStyle,
          className: 'uninstall'
        }, ' ' + labelUninstall) : void 8
      ]), react.createElement('div', {
        style: border,
        className: 'wallet-middle title-balance'
      }, children = [
        react.createElement('div', {
          title: usdRate + "",
          className: placeholder + " name"
        }, ' $' + roundHuman(usdRate)), react.createElement('div', {
          className: placeholder + " name per"
        }, children = [react.createElement('span', {}, ' ' + lang.per), " " + tokenDisplay])
      ])
    ]);
  });
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
