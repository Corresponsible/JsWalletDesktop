// Generated by LiveScript 1.6.0
(function(){
  var react, money, ref$, each, find, filter, foldl, map, walletFuncs, getLang, plus, icon, getPrimaryInfo, get, icons, roundHuman, alert, button, addressHolder, walletStats, cb;
  react = require('react');
  money = require('../tools.ls').money;
  ref$ = require('prelude-ls'), each = ref$.each, find = ref$.find, filter = ref$.filter, foldl = ref$.foldl, map = ref$.map;
  walletFuncs = require('../wallet-funcs.ls');
  getLang = require('../get-lang.ls');
  plus = require('../math.ls').plus;
  icon = require('./icon.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  get = require('../../web3t/providers/superagent.ls').get;
  icons = require('../icons.ls');
  roundHuman = require('../round-human.ls');
  alert = require('./confirmation.ls').alert;
  button = require('../components/button.ls');
  addressHolder = require('../components/address-holder.ls');
  walletStats = require('./wallet-stats.ls');
  cb = bind$(console, 'log');
  module.exports = curry$(function(store, web3t, wallets, wallet){
    var ref$, uninstall, balance, balanceUsd, pending, send, receive, usdRate, lang, style, labelUninstall, walletStyle, placeholder, placeholderCoin, name, receiveClick, sendClick, token, color1, color2, getTotal, totalSent, totalReceived, uninstallStyle, text, colorLabel, colorLabel2, children;
    ref$ = walletFuncs(store, web3t, wallets, wallet), uninstall = ref$.uninstall, wallet = ref$.wallet, balance = ref$.balance, balanceUsd = ref$.balanceUsd, pending = ref$.pending, send = ref$.send, receive = ref$.receive, usdRate = ref$.usdRate;
    lang = getLang(store);
    style = getPrimaryInfo(store);
    labelUninstall = (function(){
      switch (false) {
      case !store.current.refreshing:
        return '...';
      default:
        return lang.hide + "";
      }
    }());
    walletStyle = {
      color: style.app.text3
    };
    placeholder = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "placeholder";
      default:
        return "";
      }
    }());
    placeholderCoin = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "placeholder-coin";
      default:
        return "";
      }
    }());
    name = (ref$ = wallet.coin.name) != null
      ? ref$
      : wallet.coin.token;
    receiveClick = receive(wallet);
    sendClick = send(wallet);
    token = wallet.coin.token.toUpperCase();
    style = getPrimaryInfo(store);
    color1 = {
      color: style.app.text,
      opacity: ".5"
    };
    color2 = {
      color: style.app.text,
      opacity: ".5"
    };
    getTotal = function(type, address){
      var transactions;
      transactions = clone$(store.transactions.applied);
      return roundHuman(
      foldl(plus, '0')(
      map(function(it){
        if (it.from !== it.to) {
          return it.amount;
        }
        return (-+it.fee) + '';
      })(
      filter(function(it){
        return it.type === type && it.pending == null;
      })(
      transactions))));
    };
    totalSent = getTotal('OUT', wallet.address);
    totalReceived = getTotal('IN', wallet.address);
    walletStyle = {
      color: style.app.text3,
      background: style.app.wallet,
      borderBottom: "0",
      borderColor: style.app.borderColor + ""
    };
    uninstallStyle = {
      background: style.app.menu
    };
    text = {
      color: style.app.text
    };
    colorLabel = {
      background: style.app.primary1,
      backgroundColor: style.app.primary1Spare
    };
    colorLabel2 = {
      background: style.app.primary2,
      backgroundColor: style.app.primary2Spare
    };
    return react.createElement('div', {
      key: token + "",
      style: walletStyle,
      className: 'wallet-detailed wallet-detailed399861167'
    }, children = [
      react.createElement('div', {
        style: text,
        className: 'wallet-part left'
      }, children = [
        react.createElement('div', {
          className: 'wallet-header'
        }, children = [
          false ? react.createElement('div', {
            className: 'wallet-header-part left'
          }, children = react.createElement('img', {
            src: wallet.coin.image + "",
            className: placeholderCoin + " label-coin"
          })) : void 8, react.createElement('div', {
            className: 'wallet-header-part right'
          }, children = [
            react.createElement('div', {}, children = [
              react.createElement('span', {
                className: placeholder + " title"
              }, ' ' + name), (ref$ = wallet.coin.token) !== 'btc' && ref$ !== 'vlx2' ? react.createElement('span', {
                onClick: uninstall,
                style: uninstallStyle,
                className: 'uninstall'
              }, ' ' + labelUninstall) : void 8
            ]), react.createElement('div', {
              className: placeholder + " balance"
            }, children = [
              react.createElement('div', {
                title: wallet.balance + "",
                className: 'token-balance'
              }, children = [react.createElement('span', {}, ' ' + roundHuman(wallet.balance)), react.createElement('span', {}, ' ' + token)]), react.createElement('div', {
                title: balanceUsd + "",
                className: placeholder + " usd-balance"
              }, children = [react.createElement('span', {}, ' ' + roundHuman(balanceUsd)), react.createElement('span', {}, ' USD')]), +wallet.pendingSent > 0 ? react.createElement('div', {
                className: 'pending'
              }, children = react.createElement('span', {}, ' -' + pending)) : void 8
            ])
          ])
        ]), addressHolder({
          store: store,
          wallet: wallet,
          type: 'bg'
        }), react.createElement('div', {
          className: 'buttons'
        }, children = [
          button({
            store: store,
            onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : sendClick,
            text: 'send',
            icon: 'send',
            type: 'primary'
          }), button({
            store: store,
            onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : receiveClick,
            text: 'receive',
            icon: 'get',
            type: 'secondary'
          })
        ]), react.createElement('div', {
          className: 'details'
        }, children = [
          react.createElement('div', {
            title: balanceUsd + "",
            className: placeholder + " price"
          }, ' $' + roundHuman(balanceUsd)), react.createElement('div', {
            title: usdRate + "",
            className: placeholder + " name"
          }, ' $' + roundHuman(usdRate))
        ])
      ]), react.createElement('div', {
        className: 'wallet-part right'
      }, children = react.createElement('div', {
        className: 'wallet-header chart'
      }, children = [
        react.createElement('div', {
          className: 'wallet-header-part left'
        }, children = react.createElement('div', {
          className: 'stats'
        }, children = [
          react.createElement('span', {
            className: 'stats-style'
          }, children = react.createElement('div', {
            style: text,
            className: 'coin'
          }, children = [
            react.createElement('img', {
              src: wallet.coin.image + "",
              className: placeholderCoin + " label-coin"
            }), react.createElement('span', {
              className: placeholder + ""
            }, ' ' + token), react.createElement('span', {
              title: usdRate + "",
              className: placeholder + " course"
            }, ' $' + roundHuman(usdRate))
          ])), walletStats(store, web3t)
        ])), react.createElement('div', {
          style: text,
          className: 'wallet-header-part right'
        }, children = [
          react.createElement('div', {
            className: 'counts'
          }, children = [
            react.createElement('div', {
              style: colorLabel,
              className: 'label-icon'
            }, children = react.createElement('img', {
              src: icons.send + "",
              className: 'icon-svg'
            })), react.createElement('div', {
              className: placeholder + ""
            }, ' ' + totalSent + ' ', token), react.createElement('div', {
              style: color1,
              className: 'label'
            }, ' ' + lang.totalSent)
          ]), react.createElement('div', {
            className: 'counts'
          }, children = [
            react.createElement('div', {
              style: colorLabel2,
              className: 'label-icon'
            }, children = react.createElement('img', {
              src: icons.get + "",
              className: 'icon-svg'
            })), react.createElement('div', {
              className: placeholder + ""
            }, ' ' + totalReceived + ' ', token), react.createElement('div', {
              style: color2,
              className: 'label'
            }, ' ' + lang.totalReceived)
          ])
        ])
      ]))
    ]);
  });
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
