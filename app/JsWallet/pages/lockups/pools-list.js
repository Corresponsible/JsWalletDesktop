// Generated by LiveScript 1.6.0
(function(){
  var react, reactDom, bignumber, getPrimaryInfo, getLang, historyFuncs, queryPools, icon, ref$, map, split, filter, find, foldl, sortBy, unique, head, each, div, times, plus, minus, hdkey, bip39, md5, Buffer, ethToVlx, roundHuman, requestStake, checkbox, icons, placeholder, canMakeStaking, alert, button, addressHolder, alertTxn, amountField, seedmem, moment, stringify, poolsContent, poolsList;
  react = require('react');
  reactDom = require('react-dom');
  bignumber = require('bignumber.js');
  getPrimaryInfo = require('../../get-primary-info.js');
  getLang = require('../../get-lang.js');
  historyFuncs = require('../../history-funcs.js');
  queryPools = require('../../stake-funcs.js').queryPools;
  icon = require('../icon.js');
  ref$ = require('prelude-ls'), map = ref$.map, split = ref$.split, filter = ref$.filter, find = ref$.find, foldl = ref$.foldl, sortBy = ref$.sortBy, unique = ref$.unique, head = ref$.head, each = ref$.each;
  ref$ = require('../../math.js'), div = ref$.div, times = ref$.times, plus = ref$.plus, minus = ref$.minus;
  ref$ = require('../../../web3t/providers/deps.js'), hdkey = ref$.hdkey, bip39 = ref$.bip39;
  md5 = require('md5');
  Buffer = require('safe-buffer').Buffer;
  ethToVlx = require('../../../web3t/addresses.js').ethToVlx;
  roundHuman = require('../../round-human.js');
  requestStake = require('./request-stake.js');
  checkbox = require('../../components/checkbox.js');
  icons = require('../../icons.js');
  placeholder = require('../placeholder.js');
  canMakeStaking = require('../../staking/can-make-staking.js');
  alert = require('../confirmation.js').alert;
  button = require('../../components/button.js');
  addressHolder = require('../../components/address-holder.js');
  alertTxn = require('../alert-txn.js');
  amountField = require('../../components/amount-field.js');
  seedmem = require('../../seed.js');
  moment = require('moment');
  stringify = function(value){
    if (value != null) {
      return roundHuman(parseFloat(div(value, Math.pow(10, 18))));
    } else {
      return '..';
    }
  };
  poolsContent = function(store, web3t){
    var currentContract, lockupActionChoose, style, lang, buttonPrimary3Style, iconStyle, stakerPoolStyle, stats, ref$, address, lockedFunds, lockedPool, stake, lockedFundsReleaseTime, buildPool, children;
    if (store.staking.pools == null || store.staking.pools.length === 0) {
      return null;
    }
    if (store.lockups.chosenLockup == null) {
      return null;
    }
    currentContract = store.lockups.chosenLockup;
    lockupActionChoose = store.lockups.chosenLockupAction === 'choose';
    style = getPrimaryInfo(store);
    lang = getLang(store);
    buttonPrimary3Style = {
      border: "1px solid " + style.app.primary3,
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare
    };
    iconStyle = {
      color: style.app.loader,
      marginTop: "10px",
      width: "inherit"
    };
    stakerPoolStyle = {
      maxWidth: 200,
      background: style.app.stats
    };
    stats = {
      background: style.app.stats
    };
    ref$ = store.lockups.chosenLockup, address = ref$.address, lockedFunds = ref$.lockedFunds, lockedPool = ref$.lockedPool, stake = ref$.stake, lockedFundsReleaseTime = ref$.lockedFundsReleaseTime;
    buildPool = function(store, web3t){
      return function(item){
        var checked, stake, myStake, lockupStaking, extraStake, index, changeDefaultPool, toEth, reward, filled, filledColor, vlx2, wallet, mystakeClass, pointerClass, buttonLabel, isDisabled, lockedUntil, lockedFunds, children;
        checked = item.checked;
        stake = item.stake;
        myStake = (function(){
          switch (false) {
          case +item.myStake !== 0:
            return item.withdrawAmount;
          default:
            return item.myStake;
          }
        }());
        if (myStake == null) {
          myStake = 0;
        }
        lockupStaking = store.lockups.lockupStaking[item.address];
        if (myStake != null && lockupStaking != null && lockupStaking.length > 0) {
          extraStake = foldl(plus, 0)(
          lockupStaking);
          myStake = plus(extraStake, myStake);
        }
        index = store.staking.pools.indexOf(item) + 1;
        changeDefaultPool = function(){
          var cb, lockupAddress, Timelock, contractAddress, data, to;
          cb = function(err, data){
            if (err != null) {
              return alert(store, err, bind$(console, 'log'));
            }
          };
          store.lockups.successCb = function(){
            console.log("       success-cb");
            store.current.page = 'choosestaker';
            store.lockups.chosenLockup = currentContract;
            return store.lockups.chosenLockup.chosenLockupAction = 'choose';
          };
          store.lockups.error = "";
          lockupAddress = store.lockups.chosenLockup.address;
          Timelock = web3t.velas.Timelock.at(lockupAddress);
          contractAddress = Timelock.address;
          data = Timelock.changeDefaultPool.getData(item.address);
          to = contractAddress;
          return web3t.vlx2.sendTransaction({
            to: to,
            data: data,
            amount: 0
          }, function(err){
            return store.lockups.successCb();
          });
        };
        toEth = function(){
          return item.eth = !item.eth;
        };
        reward = (function(){
          switch (false) {
          case item.validatorRewardPercent !== "..":
            return "..";
          default:
            return (100 - +item.validatorRewardPercent) * 1.4285714286;
          }
        }());
        filled = roundHuman(reward) + "%";
        filledColor = {
          color: (function(){
            switch (false) {
            case !(reward > 95):
              return 'red';
            case !(reward > 75):
              return 'orange';
            case !(reward > 40):
              return "rgb(165, 174, 81)";
            default:
              return "rgb(38, 219, 85)";
            }
          }())
        };
        vlx2 = find(function(it){
          return it.coin.token === 'vlx2';
        })(
        store.current.account.wallets);
        wallet = {
          address: ethToVlx(item.address),
          network: vlx2.network,
          coin: vlx2.coin
        };
        mystakeClass = +myStake > 0 ? "with-stake" : "";
        pointerClass = store.lockups.lockupStakingAddress != null && store.lockups.lockupStakingAddress === item.address ? "stake-pointer" : "";
        buttonLabel = !lockupActionChoose ? 'Select' : 'Choose';
        isDisabled = currentContract.lockedPool === item.address && !lockupActionChoose;
        lockedUntil = currentContract.lockedFundsReleaseTime != null ? moment(currentContract.lockedFundsReleaseTime * 1000).format("DD/MM/YYYY hh:mm") : "..";
        lockedFunds = store.lockups.chosenLockup.lockedFunds;
        return react.createElement('tr', {
          className: item.status + " " + pointerClass
        }, children = [
          react.createElement('td', {}, children = react.createElement('span', {
            className: item.status + " circle"
          }, ' ' + index)), react.createElement('td', {
            datacolumn: 'Staker Address',
            title: ethToVlx(item.address) + ""
          }, children = addressHolder({
            store: store,
            wallet: wallet
          })), lockupActionChoose
            ? react.createElement('td', {}, ' ' + lockedFunds)
            : react.createElement('td', {}, ' ' + stake), react.createElement('td', {
            className: mystakeClass + ""
          }, ' ' + stringify(myStake)), lockupActionChoose ? react.createElement('td', {}, ' ' + lockedUntil) : void 8, !lockupActionChoose ? react.createElement('td', {}, children = button({
            classes: "choose-pool",
            store: store,
            onClick: changeDefaultPool,
            text: buttonLabel,
            type: 'secondary',
            makeDisabled: isDisabled
          })) : void 8
        ]);
      };
    };
    return react.createElement('table', {}, children = [
      react.createElement('thead', {}, children = react.createElement('tr', {}, children = [
        react.createElement('td', {
          width: "3%",
          style: stats
        }, ' #'), react.createElement('td', {
          width: "30%",
          style: stakerPoolStyle
        }, ' ' + lang.stakerPool), lockupActionChoose
          ? react.createElement('td', {
            width: "20%",
            style: stats
          }, ' Non-Staked Amount')
          : react.createElement('td', {
            width: "20%",
            style: stats
          }, ' Total Stake'), react.createElement('td', {
          width: "20%",
          style: stats
        }, ' Staked Amount'), lockupActionChoose ? react.createElement('td', {
          width: "10%",
          style: stats
        }, ' Locked Until    ') : void 8, !lockupActionChoose ? react.createElement('td', {
          width: "4%",
          style: stats
        }, ' Action') : void 8
      ])), react.createElement('tbody', {}, children = map(buildPool(store, web3t))(
      filter(function(it){
        if (it.status === 'banned') {
          return false;
        }
        if (store.lockups.chosenLockupAction === 'select') {
          return true;
        } else {
          if (currentContract.lockedPool == null || +currentContract.lockedPool === 0) {
            return true;
          }
          return it.address === currentContract.lockedPool;
        }
      })(
      store.staking.pools)))
    ]);
  };
  poolsList = function(arg$){
    var store, web3t, children;
    store = arg$.store, web3t = arg$.web3t;
    return react.createElement('div', {
      className: 'lockups-content'
    }, children = poolsContent(store, web3t));
  };
  poolsList.init = function(arg$, cb){
    var store, web3t, selectAction, action, currentContract;
    store = arg$.store, web3t = arg$.web3t, selectAction = arg$.selectAction;
    action = selectAction ? 'select' : 'choose';
    store.lockups.chosenLockupAction = 'choose';
    currentContract = store.lockups.chosenLockup;
    if (typeof selectedAction != 'undefined' && selectedAction !== null) {
      store.lockups.chosenLockupAction = action;
    } else {
      if (currentContract.lockedPool == null || (currentContract.lockedPool != null && +currentContract.lockedPool === 0)) {
        store.lockups.chosenLockupAction = 'select';
      }
    }
    return cb(null);
  };
  module.exports = poolsList;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
