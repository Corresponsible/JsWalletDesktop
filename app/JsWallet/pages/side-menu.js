// Generated by LiveScript 1.6.0
(function(){
  var react, projectLinks, menuFuncs, getPrimaryInfo, getLang, icon, loading, navigate, setupPages, icons, menu;
  react = require('react');
  projectLinks = require('./project-links.ls');
  menuFuncs = require('../menu-funcs.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  icon = require('./icon.ls');
  loading = require('./loading.ls');
  navigate = require('../navigate.ls');
  setupPages = require('../setup-pages.ls');
  icons = require('../icons.ls');
  menu = require('./menu.ls');
  module.exports = function(store, web3t){
    var ref$, current, openAccount, lock, walletStyle, info, activateS1, activateS2, activateS3, switchNetwork, refresh, style, wallets, search, settings, filestorage, staking, stakingActive, delegateActive, infoActive, resources, faq, notice, claimActive, menuStyle, iconColor, iconStyle, iconStyle2, iconStyle3, lang, syncing, borderStyle, logoStyle, expandCollapse, langsMenuBody, lockIcon, walletIcon, iconNode, textStyle, backgroundMenu, wallet, gotoSearch, gotoSettings, gotoFileStorage, gotoStaking, gotoResources, gotoChooseStaker, gotoInfo, gotoFaq, gotoNotice, gotoClaim, commingSoon, tooltip, openSubmenu, menuStaking, menuOut, color, gotoMainnet, gotoWallet, children;
    if (store == null || in$(store.current.page, setupPages)) {
      return null;
    }
    ref$ = menuFuncs(store, web3t), current = ref$.current, openAccount = ref$.openAccount, lock = ref$.lock, walletStyle = ref$.walletStyle, info = ref$.info, activateS1 = ref$.activateS1, activateS2 = ref$.activateS2, activateS3 = ref$.activateS3, switchNetwork = ref$.switchNetwork, refresh = ref$.refresh, lock = ref$.lock;
    style = getPrimaryInfo(store);
    wallets = store.current.page === 'wallets' ? 'active' : 'not-active';
    search = store.current.page === 'search' ? 'active' : 'not-active';
    settings = store.current.page === 'settings' ? 'active' : 'not-active';
    filestorage = store.current.page === 'filestorage' ? 'active' : 'not-active';
    staking = store.current.page === 'staking' ? 'active' : 'not-active';
    stakingActive = store.current.page === 'staking' ? 'active' : 'not-active';
    delegateActive = store.current.page === 'choosestaker' ? 'active' : 'not-active';
    infoActive = store.current.page === 'info' ? 'active' : 'not-active';
    resources = store.current.page === 'resources' ? 'active' : 'not-active';
    faq = store.current.page === 'faq' ? 'active' : 'not-active';
    notice = store.current.page === 'notification' ? 'active' : 'not-active';
    claimActive = store.current.page === 'claim' ? 'active' : 'not-active';
    menuStyle = {
      color: style.app.text
    };
    iconColor = {
      filter: style.app.iconFilter
    };
    iconStyle = {
      color: style.app.text
    };
    iconStyle2 = {
      opacity: "0",
      bottom: "-280px",
      left: "-57px"
    };
    iconStyle3 = {
      opacity: "0",
      bottom: "-130px",
      left: "-57px"
    };
    lang = getLang(store);
    info = getPrimaryInfo(store);
    syncing = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "syncing";
      default:
        return "";
      }
    }());
    borderStyle = {
      borderRight: "1px solid " + style.app.border,
      background: style.app.header
    };
    logoStyle = {
      filter: style.app.filterLogo
    };
    expandCollapse = function(){
      return store.current.langsOpenSide = !store.current.langsOpenSide;
    };
    langsMenuBody = {
      border: "1px solid " + style.app.border,
      background: style.app.header
    };
    lockIcon = {
      width: "14px",
      filter: style.app.iconFilter
    };
    walletIcon = {
      width: "18px",
      filter: style.app.iconFilter
    };
    iconNode = {
      position: "inherit",
      verticalAlign: "sub",
      width: "12px",
      paddingRight: "10px",
      filter: style.app.iconFilter
    };
    textStyle = {
      color: style.app.text
    };
    backgroundMenu = {
      background: style.app.header,
      border: "1px solid " + style.app.border
    };
    wallet = function(){
      return navigate(store, web3t, 'wallets');
    };
    gotoSearch = function(){
      return navigate(store, web3t, 'search');
    };
    gotoSettings = function(){
      return navigate(store, web3t, 'settings');
    };
    gotoFileStorage = function(){
      return navigate(store, web3t, 'filestorage');
    };
    gotoStaking = function(){
      return navigate(store, web3t, 'staking');
    };
    gotoResources = function(){
      return navigate(store, web3t, 'resources');
    };
    gotoChooseStaker = function(){
      return navigate(store, web3t, 'choosestaker');
    };
    gotoInfo = function(){
      return navigate(store, web3t, 'info');
    };
    gotoFaq = function(){
      return navigate(store, web3t, 'faq');
    };
    gotoNotice = function(){
      return navigate(store, web3t, 'notification');
    };
    gotoClaim = function(){
      return navigate(store, web3t, 'claim');
    };
    commingSoon = {
      opacity: ".3"
    };
    tooltip = {
      background: "#000"
    };
    openSubmenu = function(){
      return store.current.submenu = !store.current.submenu;
    };
    menuStaking = store.current.submenu ? 'submenu' : '';
    menuOut = function(){
      return store.current.submenu = false;
    };
    staking = store.current.submenu ? 'active' : 'not-active';
    color = {
      color: style.app.text
    };
    gotoMainnet = function(){
      return web3t.use('mainnet');
    };
    gotoWallet = function(){
      return navigate(store, web3t, 'wallets');
    };
    return react.createElement('div', {
      style: borderStyle,
      onMouseLeave: menuOut,
      className: 'menu side-menu menu1524712243'
    }, children = [
      react.createElement('div', {
        className: 'logo'
      }, children = react.createElement('img', {
        src: info.branding.logoSm + "",
        style: logoStyle,
        onClick: gotoWallet
      })), store.preference.lockVisible === true ? react.createElement('div', {
        onClick: lock,
        style: iconStyle,
        className: 'menu-item bottom'
      }, children = react.createElement('img', {
        src: icons.lock + "",
        style: lockIcon
      })) : void 8, react.createElement('div', {
        className: 'menu-items'
      }, children = [
        store.preference.settingsVisible === true ? react.createElement('div', {
          onClick: wallet,
          style: iconStyle,
          className: wallets + " menu-item"
        }, children = [
          react.createElement('span', {
            style: tooltip,
            className: 'arrow_box'
          }, ' ' + lang.yourWallets), react.createElement('img', {
            src: icons.wallet + "",
            style: walletIcon
          })
        ]) : void 8, store.preference.settingsVisible === true ? react.createElement('div', {
          onClick: openSubmenu,
          style: iconStyle,
          className: (staking + ' ' + menuStaking) + " menu-item"
        }, children = [
          react.createElement('div', {
            style: backgroundMenu,
            className: 'menu arrow_box menu1524712243'
          }, children = react.createElement('ul', {}, children = [
            react.createElement('li', {
              onClick: gotoStaking,
              style: iconStyle,
              className: stakingActive + ""
            }, children = [
              react.createElement('img', {
                src: icons.node + "",
                style: iconNode
              }), " " + lang.installNode
            ]), react.createElement('li', {
              onClick: gotoChooseStaker,
              style: iconStyle,
              className: delegateActive + ""
            }, children = [
              react.createElement('img', {
                src: icons.delegate + "",
                style: iconNode
              }), " " + lang.delegateStake
            ]), false ? react.createElement('li', {
              onClick: gotoClaim,
              style: iconStyle,
              className: claimActive + ""
            }, children = [
              react.createElement('img', {
                src: icons.claim + "",
                style: iconNode
              }), " " + lang.claimReward
            ]) : void 8, react.createElement('li', {
              onClick: gotoInfo,
              style: iconStyle,
              className: infoActive + ""
            }, children = [
              react.createElement('img', {
                src: icons.info + "",
                style: iconNode
              }), " " + lang.stats
            ])
          ])), react.createElement('span', {
            style: tooltip,
            className: 'arrow_box'
          }, ' ' + lang.staking), react.createElement('img', {
            src: icons.staking + "",
            style: iconColor
          })
        ]) : void 8, store.preference.settingsVisible === true ? react.createElement('div', {
          onClick: gotoSearch,
          style: iconStyle,
          className: search + " menu-item"
        }, children = [
          react.createElement('span', {
            style: tooltip,
            className: 'arrow_box'
          }, ' ' + lang.search), react.createElement('img', {
            src: icons.search + "",
            style: iconColor
          })
        ]) : void 8, store.preference.settingsVisible === true ? react.createElement('div', {
          onClick: gotoSettings,
          style: iconStyle,
          className: settings + " menu-item"
        }, children = [
          react.createElement('span', {
            style: tooltip,
            className: 'arrow_box'
          }, ' ' + lang.settings), react.createElement('img', {
            src: icons.setting + "",
            style: iconColor
          })
        ]) : void 8, store.current.network === 'testnet' ? react.createElement('div', {
          onClick: gotoMainnet,
          style: iconStyle,
          className: settings + " menu-item testnet"
        }, children = [
          react.createElement('span', {
            style: tooltip,
            className: 'arrow_box'
          }, ' testnet'), react.createElement('img', {
            src: icons.test + "",
            style: iconColor
          })
        ]) : void 8
      ])
    ]);
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
