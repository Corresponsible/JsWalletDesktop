// Generated by LiveScript 1.6.0
(function(){
  var react, reactDom, navigate, getPrimaryInfo, web3, bignumber, getLang, historyFuncs, queryPools, icon, ref$, map, split, filter, find, foldl, sortBy, unique, head, each, div, times, plus, minus, velasNodeTemplate, hdkey, bip39, md5, menuFuncs, btoa, Buffer, copiedInform, copy, round5, ethToVlx, vlxToEth, switchAccount, roundHuman, icons, placeholder, epoch, alert, notify, button, addressHolder, alertTxn, amountField, seedmem, burger, cb, asCallback, toKeystore, showValidator, stakingContent, accountDetails, stringify;
  react = require('react');
  reactDom = require('react-dom');
  navigate = require('../../navigate.js');
  getPrimaryInfo = require('../../get-primary-info.js');
  web3 = require('../../web3.js');
  bignumber = require('bignumber.js');
  getLang = require('../../get-lang.js');
  historyFuncs = require('../../history-funcs.js');
  queryPools = require('../../staking/funcs.js').queryPools;
  icon = require('../icon.js');
  ref$ = require('prelude-ls'), map = ref$.map, split = ref$.split, filter = ref$.filter, find = ref$.find, foldl = ref$.foldl, sortBy = ref$.sortBy, unique = ref$.unique, head = ref$.head, each = ref$.each;
  ref$ = require('../../math.js'), div = ref$.div, times = ref$.times, plus = ref$.plus, minus = ref$.minus;
  velasNodeTemplate = require('../../velas/velas-node-template.js');
  ref$ = require('../../../web3t/providers/deps.js'), hdkey = ref$.hdkey, bip39 = ref$.bip39;
  md5 = require('md5');
  menuFuncs = require('../../menu-funcs.js');
  btoa = require('btoa');
  Buffer = require('safe-buffer').Buffer;
  copiedInform = require('../../copied-inform.js');
  copy = require('../../copy.js');
  round5 = require('../../round5.js');
  ref$ = require('../../../web3t/addresses.js'), ethToVlx = ref$.ethToVlx, vlxToEth = ref$.vlxToEth;
  switchAccount = require('../switch-account.js');
  roundHuman = require('../../round-human.js');
  icons = require('../../icons.js');
  placeholder = require('../placeholder.js');
  epoch = require('../epoch.js');
  ref$ = require('../confirmation.js'), alert = ref$.alert, notify = ref$.notify;
  button = require('../../components/button.js');
  addressHolder = require('../../components/address-holder.js');
  alertTxn = require('../alert-txn.js');
  amountField = require('../../components/amount-field.js');
  seedmem = require('../../seed.js');
  burger = require('../../components/burger.js');
  cb = console.log;
  asCallback = function(p, cb){
    p['catch'](function(err){
      return cb(err);
    });
    return p.then(function(data){
      return cb(null, data);
    });
  };
  toKeystore = function(store, withKeystore){
    var mnemonic, seed, wallet, index, password, staking, mining;
    mnemonic = seedmem.mnemonic;
    seed = bip39.mnemonicToSeed(mnemonic);
    wallet = hdkey.fromMasterSeed(seed);
    index = store.current.accountIndex;
    password = md5(wallet.derivePath("m1").deriveChild(index).getWallet().getAddress().toString('hex'));
    staking = (function(){
      switch (false) {
      case store.urlParams.anotheracc == null:
        return {
          address: window.toEthAddress(store.urlParams.anotheracc)
        };
      default:
        return getPair(wallet, 'm0', index, password, false);
      }
    }());
    mining = getPair(wallet, 'm0/2', index, password, withKeystore);
    return {
      staking: staking,
      mining: mining,
      password: password
    };
  };
  showValidator = function(store, web3t){
    return function(validator){
      return react.createElement('li', {}, ' ' + validator);
    };
  };
  stakingContent = function(store, web3t){
    var goBack, style, lang, buttonPrimary3Style, filterIcon, commingSoon, pairs, iStakeChoosenPool, delegate, changeAddress, changeStake, velasNodeAppliedTemplate, velasNodeAppliedTemplateLine, ref$, accountLeft, accountRight, changeAccountIndex, updateCurrent, accountLeftProxy, accountRightProxy, changeAccountIndexProxy, lineStyle, activate, activateLine, activateString, activateSsh, activateDo, activeClass, activeLine, activeString, activeSsh, activeDo, getBalance, getOptions, useMin, useMax, voteForChange, yourBalance, yourStakingAmount, yourStaking, vlxToken, isSpinned, cancelPool, activateFirst, activateSecond, activateThird, activeFirst, activeSecond, activeThird, refresh, iconStyle, stakerPoolStyle, stats, children;
    goBack = historyFuncs(store, web3t).goBack;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    buttonPrimary3Style = {
      border: "1px solid " + style.app.primary3,
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare
    };
    filterIcon = {
      filter: style.app.filterIcon
    };
    commingSoon = {
      opacity: ".3"
    };
    pairs = store.staking.keystore;
    iStakeChoosenPool = function(){
      var account, myStake;
      account = store.staking.chosenAccount;
      myStake = +account.myStake;
      return myStake >= 10000;
    };
    delegate = function(){
      var wallet, account, payAccount;
      wallet = find(function(it){
        return it.coin.token === 'vlx_native';
      })(
      store.current.account.wallets);
      if (wallet == null) {
        return null;
      }
      if (store.staking.chosenAccount == null) {
        return alert(store, "please choose the account", cb);
      }
      account = store.staking.chosenAccount;
      payAccount = find(function(it){
        return it.address === account.address;
      })(
      web3t.velas.NativeStaking.accounts);
      if (!payAccount) {
        return cb(null);
      }
      console.log("");
      return asCallback(web3t.velas.NativeStaking.delegate(payAccount.address, account.address), function(err, result){
        console.log("result", result);
        if (err != null) {
          console.error("Result sending:", err);
        }
        if (err != null) {
          alert(store, err.toString());
        }
        return notify(store, "FUNDS DELEGATED", function(){
          return navigate(store, web3t, 'validators');
        });
      });
    };
    changeAddress = function(it){
      return store.staking.add.addValidator = it.target.value;
    };
    changeStake = function(it){
      var value, err;
      try {
        value = new bignumber(it.target.value).toFixed().toString();
        store.staking.add.addValidatorStake = value;
      } catch (e$) {
        err = e$;
        console.log("[Change-stake]: " + err);
      }
    };
    velasNodeAppliedTemplate = split("\n")(
    velasNodeTemplate(
    pairs));
    velasNodeAppliedTemplateLine = function(it){
      return "echo '" + it + "' | base64 --decode | sh";
    }(
    btoa(
    velasNodeTemplate(
    pairs)));
    if (pairs.mining == null) {
      return null;
    }
    ref$ = menuFuncs(store, web3t), accountLeft = ref$.accountLeft, accountRight = ref$.accountRight, changeAccountIndex = ref$.changeAccountIndex;
    updateCurrent = function(func){
      return function(data){
        func(data);
        return staking.init({
          store: store,
          web3t: web3t
        }, function(){
          return store.staking.keystore = toKeystore(store, false);
        });
      };
    };
    accountLeftProxy = updateCurrent(accountLeft);
    accountRightProxy = updateCurrent(accountRight);
    changeAccountIndexProxy = updateCurrent(changeAccountIndex);
    lineStyle = {
      padding: "10px",
      width: '100%'
    };
    activate = function(tab){
      return function(){
        return store.staking.tab = tab;
      };
    };
    activateLine = activate('line');
    activateString = activate('string');
    activateSsh = activate('ssh');
    activateDo = activate('do');
    activeClass = function(tab){
      if (store.staking.tab === tab) {
        return 'active';
      } else {
        return '';
      }
    };
    activeLine = activeClass('line');
    activeString = activeClass('string');
    activeSsh = activeClass('ssh');
    activeDo = activeClass('do');
    getBalance = function(){
      var wallet;
      wallet = find(function(it){
        return it.coin.token === 'vlx2';
      })(
      store.current.account.wallets);
      return wallet.balance;
    };
    getOptions = function(cb){
      var iAmStaker;
      iAmStaker = iStakeChoosenPool();
      if (iAmStaker) {
        return cb(null);
      }
      return web3t.velas.Staking.candidateMinStake(function(err, data){
        var min, balance, stake, max;
        if (err != null) {
          return cb(err);
        }
        min = (function(){
          switch (false) {
          case !(+store.staking.stakeAmountTotal >= 10000):
            return 1;
          default:
            return div(data, Math.pow(10, 18));
          }
        }());
        balance = minus(getBalance(), 0.1);
        stake = store.staking.add.addValidatorStake;
        if (10000 > +stake) {
          return cb(lang.amountLessStaking);
        }
        if (+balance < +stake) {
          return cb(lang.balanceLessStaking);
        }
        max = +balance;
        return cb(null, {
          min: min,
          max: max
        });
      });
    };
    useMin = function(){
      return store.staking.add.addValidatorStake = 10000;
    };
    useMax = function(){
      return store.staking.add.addValidatorStake = Math.max(minus(getBalance(), 0.1), 0);
    };
    voteForChange = function(){
      return web3t.velas.ValidatorSet.emitInitiateChangeCallable(function(err, can){
        var data, to, amount;
        if (err != null) {
          return alert(store, err, cb);
        }
        if (can !== true) {
          return alert(store, lang.actionProhibited, cb);
        }
        data = web3t.velas.ValidatorSet.emitInitiateChange.getData();
        to = web3t.velas.ValidatorSet.address;
        amount = 0;
        return web3t.vlx2.sendTransaction({
          to: to,
          data: data,
          amount: amount
        }, function(err){
          return store.current.page = 'staking';
        });
      });
    };
    yourBalance = " " + store.staking.chosenAccount.balance + " ";
    yourStakingAmount = div(store.staking.stakeAmountTotal, Math.pow(10, 18));
    yourStaking = " " + roundHuman(yourStakingAmount);
    vlxToken = "VLX";
    isSpinned = (store.staking.allPoolsLoaded === false || store.staking.allPoolsLoaded == null) && store.staking.poolsAreLoading === true ? "spin disabled" : "";
    cancelPool = function(){
      return store.staking.chosenAccount = null;
    };
    activate = function(step){
      return function(){
        return store.current.step = step;
      };
    };
    activateFirst = activate('first');
    activateSecond = activate('second');
    activateThird = activate('third');
    activeClass = function(step){
      if (store.current.step === step) {
        return 'active';
      } else {
        return '';
      }
    };
    activeFirst = activeClass('first');
    activeSecond = activeClass('second');
    activeThird = activeClass('third');
    refresh = function(){
      var cb;
      store.staking.allPoolsLoaded = false;
      if ((store.staking.allPoolsLoaded === false || store.staking.allPoolsLoaded == null) && store.staking.poolsAreLoading === true) {
        return false;
      }
      store.staking.poolsAreLoading = true;
      cb = console.log;
      return staking.init({
        store: store,
        web3t: web3t
      }, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null, 'done');
      });
    };
    iconStyle = {
      color: style.app.loader,
      marginTop: "10px",
      width: "inherit"
    };
    stakerPoolStyle = {
      maxWidth: 200,
      background: style.app.stats
    };
    stats = {
      background: style.app.stats
    };
    return react.createElement('div', {
      className: 'staking-content delegate'
    }, children = react.createElement('div', {
      id: "choosen-pull",
      className: 'single-section form-group'
    }, children = [
      react.createElement('div', {
        className: 'section'
      }, children = react.createElement('div', {
        className: 'title'
      }, children = react.createElement('h2', {}, ' Stake Account'))), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Address')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('div', {
          title: store.staking.chosenAccount.address + "",
          className: 'chosen-account'
        }, children = react.createElement('span', {}, children = [
          " " + store.staking.chosenAccount.address, react.createElement('img', {
            src: icons.imgCheck + "",
            className: 'check'
          })
        ])))
      ]), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Seed')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('span', {}, children = " " + store.staking.chosenAccount.seed))
      ]), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Rent exempt reserve')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('span', {}, children = " " + store.staking.chosenAccount.rent + " VLX"))
      ]), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Balance')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('span', {}, children = " " + store.staking.chosenAccount.balance + " VLX"))
      ]), react.createElement('div', {}), react.createElement('div', {}), react.createElement('div', {
        className: 'section'
      }, children = react.createElement('div', {
        className: 'title'
      }, children = react.createElement('h2', {}, ' Stake Delegation'))), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Status')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('div', {
          title: store.staking.chosenAccount.status + "",
          className: 'chosen-account'
        }, children = react.createElement('span', {}, children = " " + store.staking.chosenAccount.status)))
      ]), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Validator')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('span', {}, children = " " + store.staking.chosenAccount.validator))
      ]), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Credits observed')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('span', {}, children = " " + 0 + " VLX"))
      ]), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Active stake')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('span', {}, children = " " + 0 + " VLX"))
      ]), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Inactive stake')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('span', {}, children = " " + 0 + " VLX"))
      ]), react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h3', {}, ' Delegated Stake')), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('span', {}, children = " " + 0 + " VLX"))
      ])
    ]));
  };
  accountDetails = function(arg$){
    var store, web3t, lang, goBack, gotoSearch, info, style, borderStyle, borderStyle2, borderRight, headerTableStyle, lightText, iconColor, showClass, children;
    store = arg$.store, web3t = arg$.web3t;
    lang = getLang(store);
    goBack = historyFuncs(store, web3t).goBack;
    gotoSearch = function(){
      return navigate(store, web3t, 'search');
    };
    info = getPrimaryInfo(store);
    style = {
      background: info.app.wallet,
      color: info.app.text
    };
    borderStyle = {
      color: info.app.text,
      borderBottom: "1px solid " + info.app.border,
      background: info.app.background,
      backgroundColor: info.app.bgspare
    };
    borderStyle2 = {
      color: info.app.text,
      borderBottom: "1px solid " + info.app.border,
      background: "#4b2888"
    };
    borderRight = {
      color: info.app.text,
      borderRight: "1px solid " + info.app.border
    };
    headerTableStyle = {
      borderBottom: "1px solid " + info.app.border,
      background: info.app.walletLight
    };
    lightText = {
      color: info.app.color3
    };
    iconColor = {
      filter: info.app.iconFilter
    };
    showClass = store.current.openMenu ? 'hide' : "";
    return react.createElement('div', {
      className: 'staking staking2068861017'
    }, children = [
      react.createElement('div', {
        style: borderStyle,
        className: 'title'
      }, children = [
        react.createElement('div', {
          className: showClass + " header"
        }, ' ' + lang.delegateStake), react.createElement('div', {
          onClick: goBack,
          className: 'close'
        }, children = react.createElement('img', {
          src: icons.arrowLeft + "",
          style: iconColor,
          className: 'icon-svg'
        })), burger(store, web3t), epoch(store, web3t), switchAccount(store, web3t)
      ]), stakingContent(store, web3t)
    ]);
  };
  stringify = function(value){
    if (value != null) {
      return roundHuman(parseFloat(div(value, Math.pow(10, 18))));
    } else {
      return '..';
    }
  };
  module.exports = accountDetails;
}).call(this);
