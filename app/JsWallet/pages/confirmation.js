// Generated by LiveScript 1.6.0
(function(){
  var react, getPrimaryInfo, getLang, icon, icons, alertModal, confirmationModal, promptModal, confirmationControl, state, confirm, prompt, alert, toString$ = {}.toString, out$ = typeof exports != 'undefined' && exports || this;
  react = require('react');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  icon = require('./icon.ls');
  icons = require('../icons.ls');
  alertModal = function(store){
    var cancel, style, confirmationStyle, confirmationStyle2, buttonStyle, confirmation, lang, children;
    if (toString$.call(store.current.alert).slice(8, -1) !== 'String') {
      return null;
    }
    cancel = function(){
      var callback;
      store.current.alert = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(false);
      }
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text
    };
    confirmationStyle2 = {
      color: style.app.text
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    return react.createElement('div', {
      className: 'confirmation confirmation1976106112'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: confirmationStyle,
        className: 'header'
      }, ' Alert'), react.createElement('div', {
        style: confirmationStyle2,
        className: 'text'
      }, ' ' + store.current.alert), react.createElement('div', {
        className: 'buttons'
      }, children = react.createElement('button', {
        onClick: cancel,
        style: buttonStyle,
        className: 'button'
      }, children = react.createElement('span', {
        className: 'cancel'
      }, children = [
        react.createElement('img', {
          src: icons.close + "",
          className: 'icon-svg-cancel'
        }), " " + lang.cancel
      ])))
    ]));
  };
  confirmationModal = function(store){
    var confirm, cancel, style, confirmationStyle, confirmationStyle2, buttonStyle, confirmation, lang, children;
    if (toString$.call(store.current.confirmation).slice(8, -1) !== 'String') {
      return null;
    }
    confirm = function(){
      var callback;
      store.current.confirmation = true;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(true);
      }
    };
    cancel = function(){
      var callback;
      store.current.confirmation = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(false);
      }
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text
    };
    confirmationStyle2 = {
      color: style.app.text
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    return react.createElement('div', {
      className: 'confirmation confirmation1976106112'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: confirmationStyle,
        className: 'header'
      }, ' ' + lang.confirmation), react.createElement('div', {
        style: confirmationStyle2,
        className: 'text'
      }, ' ' + store.current.confirmation), react.createElement('div', {
        className: 'buttons'
      }, children = [
        react.createElement('button', {
          onClick: confirm,
          style: buttonStyle,
          className: 'button'
        }, children = react.createElement('span', {
          className: 'apply'
        }, children = [
          react.createElement('img', {
            src: icons.apply + "",
            className: 'icon-svg-apply'
          }), " " + lang.confirm
        ])), react.createElement('button', {
          onClick: cancel,
          style: buttonStyle,
          className: 'button'
        }, children = react.createElement('span', {
          className: 'cancel'
        }, children = [
          react.createElement('img', {
            src: icons.close + "",
            className: 'icon-svg-cancel'
          }), " " + lang.cancel
        ]))
      ])
    ]));
  };
  promptModal = function(store){
    var confirm, cancel, changeInput, style, confirmationStyle, inputStyle, buttonStyle, confirmation, lang, children;
    if (toString$.call(store.current.prompt).slice(8, -1) !== 'String') {
      return null;
    }
    confirm = function(){
      var callback, promptAnswer;
      store.current.prompt = true;
      callback = state.callback;
      state.callback = null;
      promptAnswer = store.current.promptAnswer;
      store.current.promptAnswer = "";
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(promptAnswer);
      }
    };
    cancel = function(){
      var callback;
      store.current.prompt = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        callback(null);
      }
      return store.current.promptAnswer = "";
    };
    changeInput = function(e){
      return store.current.promptAnswer = e.target.value;
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text
    };
    inputStyle = {
      background: style.app.wallet,
      color: style.app.text,
      border: "0"
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    return react.createElement('div', {
      className: 'confirmation confirmation1976106112'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: style = confirmationStyle,
        className: 'header'
      }, ' ' + lang.confirmation), react.createElement('div', {
        style: style = confirmationStyle,
        className: 'text'
      }, ' ' + store.current.prompt), react.createElement('div', {}, children = react.createElement('input', {
        onChange: changeInput,
        value: store.current.promptAnswer + "",
        style: inputStyle
      })), react.createElement('div', {
        className: 'buttons'
      }, children = [
        react.createElement('button', {
          onClick: confirm,
          style: buttonStyle,
          className: 'button'
        }, children = react.createElement('span', {
          className: 'apply'
        }, children = [
          react.createElement('img', {
            src: icons.apply + "",
            className: 'icon-svg-apply'
          }), " " + lang.confirm
        ])), react.createElement('button', {
          onClick: cancel,
          style: buttonStyle,
          className: 'button'
        }, children = react.createElement('span', {
          className: 'cancel'
        }, children = [
          react.createElement('img', {
            src: icons.close + "",
            className: 'icon-svg-cancel'
          }), " " + lang.cancel
        ]))
      ])
    ]));
  };
  out$.confirmationControl = confirmationControl = function(store){
    var children;
    if (store.current.pagePin != null) {
      return null;
    }
    return react.createElement('div', {}, children = [confirmationModal(store), promptModal(store), alertModal(store)]);
  };
  state = {
    callback: null
  };
  out$.confirm = confirm = function(store, text, cb){
    store.current.confirmation = text;
    return state.callback = cb;
  };
  out$.prompt = prompt = function(store, text, cb){
    store.current.prompt = text;
    return state.callback = cb;
  };
  out$.alert = alert = function(store, text, cb){
    store.current.alert = text;
    return state.callback = cb;
  };
  window.confirmState = state;
}).call(this);
