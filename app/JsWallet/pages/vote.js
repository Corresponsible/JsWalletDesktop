// Generated by LiveScript 1.6.0
(function(){
  var react, reactDom, navigate, getPrimaryInfo, web3, getLang, icon, switchAccount, icons, epoch, alertDemo, map, minus, textField, button, burger, item, urlR, content, vote, buildProposalView, buildProposalViews;
  react = require('react');
  reactDom = require('react-dom');
  navigate = require('../navigate.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  web3 = require('../web3.ls');
  getLang = require('../get-lang.ls');
  icon = require('./icon.ls');
  switchAccount = require('./switch-account.ls');
  icons = require('../icons.ls');
  epoch = require('./epoch.ls');
  alertDemo = require('./alert-demo.ls');
  map = require('prelude-ls').map;
  minus = require('../math.ls').minus;
  textField = require('../components/text-field.ls');
  button = require('../components/button.ls');
  burger = require('../components/burger.ls');
  item = function(store, web3t){
    return function(vote){
      var lang, info, description, url, progress, votesUpWeight, votesDownWeight, border, background, addClass, raise, lower, view, updateProgress, children;
      lang = getLang(store);
      info = getPrimaryInfo(store);
      description = vote[0], url = vote[1], progress = vote[2], votesUpWeight = vote[3], votesDownWeight = vote[4];
      vote = minus(votesUpWeight, votesDownWeight);
      border = {
        borderBottom: "1px solid " + info.app.border
      };
      background = {
        background: info.app.primary + ""
      };
      addClass = function(){
        return store.current.rate = !store.current.rate;
      };
      raise = store.current.rate ? "" : 'active';
      lower = store.current.rate ? 'active' : "";
      view = store.current.view ? 'compact' : "";
      updateProgress = function(){
        var newp;
        newp = store.development.newProposal;
        return newp.updateProgress = progress;
      };
      return react.createElement('div', {
        style: border,
        className: view + " item"
      }, children = [
        react.createElement('span', {
          style: background,
          className: 'label'
        }, ' Sphere'), react.createElement('div', {
          className: 'rate'
        }, children = react.createElement('ul', {}, children = [
          react.createElement('li', {
            onClick: addClass,
            className: raise + ""
          }, children = react.createElement('img', {
            src: icons.rate + ""
          })), react.createElement('li', {}, ' ' + vote), react.createElement('li', {
            onClick: addClass,
            className: lower + ""
          }, children = react.createElement('img', {
            src: icons.rate + ""
          }))
        ])), react.createElement('div', {
          className: 'screen'
        }, children = react.createElement('a', {
          href: "#"
        }, children = react.createElement('img', {
          src: "https://res.cloudinary.com/dfbhd7liw/image/upload/v1586441544/velas/Bitmap.png"
        }))), react.createElement('div', {
          className: 'description'
        }, children = [
          react.createElement('div', {
            className: 'header'
          }, ' ' + description), react.createElement('div', {
            className: 'sub-header'
          }, ' ' + url), react.createElement('div', {
            className: 'progress'
          }, children = [
            react.createElement('progress', {
              value: progress + "",
              max: "100"
            }), react.createElement('span', {}, ' Start'), react.createElement('span', {}, ' End')
          ])
        ])
      ]);
    };
  };
  urlR = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
  content = function(store, web3t){
    var lang, info, style, borderStyle, addClass, view, newp, createNewVote, changeDescription, changeUrl, changeProgress, applyNewVote, cancelNewVote, children;
    lang = getLang(store);
    info = getPrimaryInfo(store);
    style = {
      color: info.app.text,
      border: "1px solid " + info.app.border,
      background: info.app.header
    };
    borderStyle = {
      color: info.app.text,
      border: "1px solid " + info.app.border,
      padding: "15px",
      marginTop: "-11px"
    };
    addClass = function(){
      return store.current.view = !store.current.view;
    };
    view = store.current.view ? 'compact' : "";
    newp = store.development.newProposal;
    createNewVote = function(){
      return newp.opened = true;
    };
    changeDescription = function(it){
      return newp.description = it.target.value;
    };
    changeUrl = function(it){
      return newp.url = it.target.value;
    };
    changeProgress = function(it){
      return newp.progress = it.target.value;
    };
    applyNewVote = function(){
      var cb, data, to, amount;
      cb = alert;
      if (newp.description.length < 10) {
        return cb("description should be longer");
      }
      if (newp.url.match(urlR) == null) {
        return cb("url must be defined");
      }
      if (newp.progress.match(/[0-9]+/) == null) {
        return cb("progress must be defined");
      }
      data = web3t.velas.Development.addProposal.getData(newp.description, newp.url, newp.progress);
      if (typeof err != 'undefined' && err !== null) {
        return cb(err);
      }
      to = web3t.velas.Development.address;
      amount = 0;
      return web3t.vlx2.sendTransaction({
        to: to,
        data: data,
        amount: amount,
        gas: 9600000,
        gasPrice: 1000000
      }, function(err){});
    };
    cancelNewVote = function(){
      newp.description = "";
      newp.url = "";
      newp.progress = '0';
      return newp.opened = false;
    };
    return react.createElement('div', {
      className: 'side'
    }, children = [
      react.createElement('div', {
        style: style,
        className: 'filter'
      }, children = [
        react.createElement('ul', {}, children = [
          react.createElement('li', {}, children = [
            react.createElement('img', {
              src: icons.best + ""
            }), " Best"
          ]), react.createElement('li', {
            className: 'active'
          }, children = [
            react.createElement('img', {
              src: icons.hot + ""
            }), " Hot"
          ]), react.createElement('li', {}, children = [
            react.createElement('img', {
              src: icons['new'] + ""
            }), " New"
          ]), react.createElement('li', {}, children = [
            react.createElement('img', {
              src: icons.top + ""
            }), " Top"
          ])
        ]), react.createElement('ul', {
          className: 'view'
        }, children = [
          react.createElement('li', {
            onClick: addClass,
            className: view + ""
          }, children = [
            react.createElement('img', {
              src: icons.compact + ""
            }), react.createElement('img', {
              src: icons.classic + ""
            })
          ]), react.createElement('li', {
            onClick: createNewVote
          }, children = [
            react.createElement('img', {
              src: icons.create + ""
            }), react.createElement('img', {
              src: icons.create + ""
            })
          ])
        ])
      ]), newp.updateProgress ? react.createElement('div', {
        style: borderStyle,
        className: 'create-new-proposal main-content'
      }, ' Please make upgrade process here') : void 8, newp.opened === true ? react.createElement('div', {
        style: borderStyle,
        className: 'create-new-proposal main-content'
      }, children = [
        textField({
          store: store,
          value: newp.description,
          onChange: changeDescription,
          placeholder: "description"
        }), textField({
          store: store,
          value: newp.url,
          onChange: changeUrl,
          placeholder: "url"
        }), textField({
          store: store,
          value: newp.progress,
          onChange: changeProgress,
          placeholder: "progress"
        }), button({
          store: store,
          onClick: applyNewVote,
          type: 'primary',
          icon: 'apply',
          text: 'btnApply'
        }), button({
          store: store,
          onClick: cancelNewVote,
          icon: 'close2',
          text: 'cancel'
        })
      ]) : void 8, react.createElement('div', {
        style: style,
        className: 'main-content'
      }, children = map(item(store, web3t))(
      store.development.proposals))
    ]);
  };
  vote = function(arg$){
    var store, web3t, lang, gotoSearch, info, borderStyle, showClass, children;
    store = arg$.store, web3t = arg$.web3t;
    lang = getLang(store);
    gotoSearch = function(){
      return navigate(store, web3t, 'search');
    };
    info = getPrimaryInfo(store);
    borderStyle = {
      color: info.app.text,
      borderBottom: "1px solid " + info.app.border,
      background: info.app.background,
      backgroundColor: info.app.bgspare
    };
    showClass = store.current.openMenu ? 'hide' : "";
    return react.createElement('div', {
      className: 'vote vote-1379191436'
    }, children = [
      alertDemo(store, web3t), react.createElement('div', {
        style: borderStyle,
        className: 'title'
      }, children = [
        react.createElement('div', {
          className: showClass + " header"
        }, ' Vote'), react.createElement('div', {
          onClick: gotoSearch,
          className: 'close'
        }, children = react.createElement('img', {
          src: icons.arrowLeft + "",
          className: 'icon-svg'
        })), burger(store, web3t), epoch(store, web3t), switchAccount(store, web3t)
      ]), react.createElement('div', {
        className: 'wrapper'
      }, children = content(store, web3t))
    ]);
  };
  module.exports = vote;
  buildProposalView = function(arg$, index, cb){
    var web3t, store;
    web3t = arg$.web3t, store = arg$.store;
    return web3t.velas.Development.getProposalByIndex(index, function(err, proposal){
      if (err != null) {
        return cb(err);
      }
      return cb(null, proposal);
    });
  };
  buildProposalViews = function(arg$, length, cb){
    var web3t, store;
    web3t = arg$.web3t, store = arg$.store;
    if (length === 0) {
      return cb(null, []);
    }
    return setImmediate(function(){
      var nextLength;
      nextLength = length - 1;
      return buildProposalView({
        web3t: web3t,
        store: store
      }, nextLength, function(err, proposalView){
        if (err != null) {
          return cb(err);
        }
        return buildProposalViews({
          web3t: web3t,
          store: store
        }, nextLength, function(err, rest){
          if (err != null) {
            return cb(err);
          }
          return cb(null);
        });
      });
    });
  };
  module.exports.init = function(arg$, cb){
    var web3t, store;
    web3t = arg$.web3t, store = arg$.store;
    return web3t.velas.Development.proposalLength(function(err, length){
      if (err != null) {
        return cb(err);
      }
      return buildProposalViews({
        web3t: web3t,
        store: store
      }, +length, function(err, proposals){
        if (err != null) {
          return cb(err);
        }
        store.development.proposals = proposals;
        return cb(null);
      });
    });
  };
}).call(this);
