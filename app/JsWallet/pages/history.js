// Generated by LiveScript 1.6.0
(function(){
  var react, ref$, sortBy, reverse, filter, map, find, take, historyFuncs, getPrimaryInfo, getLang, icon, loading, CopyToClipboard, copiedInform, copy, icons, MiddleEllipsis, addressHolder, loader, renderTransaction;
  react = require('react');
  ref$ = require('prelude-ls'), sortBy = ref$.sortBy, reverse = ref$.reverse, filter = ref$.filter, map = ref$.map, find = ref$.find, take = ref$.take;
  historyFuncs = require('../history-funcs.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  icon = require('./icon.ls');
  loading = require('./loading.ls');
  CopyToClipboard = require('react-copy-to-clipboard').CopyToClipboard;
  copiedInform = require('../copied-inform.ls');
  copy = require('../copy.ls');
  icons = require('../icons.ls');
  MiddleEllipsis = require('../components/middle-ellipsis');
  addressHolder = require('../components/address-holder.ls');
  loader = function(arg$){
    var store, web3t, children;
    store = arg$.store, web3t = arg$.web3t;
    return react.createElement('div', {
      className: 'loader-ios'
    }, children = react.createElement('svg', {
      width: '15px',
      height: '15px',
      viewbox: '0 0 15 15',
      version: '1.1',
      xmlns: 'http://www.w3.org/2000/svg'
    }, children = [
      react.createElement('path', {
        d: 'M10.3866667,5.83333333 C10.2338889,5.56722222 10.3238889,5.22777778 10.5894444,5.07388889 L13.2333333,3.54555556 C13.5011111,3.39388889 13.8416667,3.48444444 13.9944444,3.75 C14.1477778,4.01611111 14.0583333,4.35666667 13.7922222,4.50777778 L11.1455556,6.03611111 C10.8794444,6.18944444 10.5405556,6.09833333 10.3866667,5.83333333 Z'
      }), react.createElement('path', {
        d: 'M8.96277778,3.85444444 L10.4905556,1.20722222 C10.6438889,0.941666667 10.9844444,0.85 11.25,1.00388889 C11.5161111,1.15722222 11.6061111,1.49611111 11.4527778,1.76277778 L9.92611111,4.40833333 C9.77277778,4.675 9.43277778,4.76666667 9.16666667,4.61277778 C8.90055556,4.45944444 8.80888889,4.11888889 8.96277778,3.85444444 Z'
      }), react.createElement('path', {
        d: 'M7.49944444,4.16666667 C7.19277778,4.16666667 6.94388889,3.91777778 6.94388889,3.61055556 L6.94388889,0.555555556 C6.94388889,0.247777778 7.19277778,0 7.49944444,0 C7.80722222,0 8.05666667,0.248333333 8.05666667,0.555555556 L8.05666667,3.61055556 C8.05555556,3.91833333 7.80722222,4.16666667 7.49944444,4.16666667 Z'
      }), react.createElement('path', {
        d: 'M4.61277778,5.83333333 C4.45888889,6.09833333 4.11944444,6.18944444 3.85444444,6.03611111 L1.20833333,4.50777778 C0.942777778,4.35666667 0.851111111,4.01611111 1.00444444,3.75 C1.15833333,3.48388889 1.49888889,3.39333333 1.76388889,3.54555556 L4.40944444,5.07388889 C4.67555556,5.22777778 4.76666667,5.56722222 4.61277778,5.83333333 Z'
      }), react.createElement('path', {
        d: 'M5.07388889,4.40944444 L3.54611111,1.76333333 C3.39277778,1.49666667 3.48444444,1.15777778 3.74888889,1.00444444 C4.015,0.850555556 4.35444444,0.941111111 4.50833333,1.20777778 L6.03611111,3.855 C6.18833333,4.11944444 6.09833333,4.45944444 5.83222222,4.61277778 C5.56722222,4.76722222 5.22722222,4.675 5.07388889,4.40944444 Z'
      }), react.createElement('path', {
        d: 'M3.61055556,8.05555556 L0.555555556,8.05555556 C0.247777778,8.05555556 0,7.80666667 0,7.5 C0,7.19222222 0.248333333,6.94388889 0.555555556,6.94388889 L3.61055556,6.94388889 C3.91722222,6.94388889 4.16666667,7.19277778 4.16666667,7.5 C4.16666667,7.80666667 3.91777778,8.05555556 3.61055556,8.05555556 Z'
      }), react.createElement('path', {
        d: 'M4.61277778,9.16777778 C4.76666667,9.43333333 4.67555556,9.77222222 4.41,9.92666667 L1.76444444,11.4538889 C1.49888889,11.6055556 1.15833333,11.5161111 1.00444444,11.2505556 C0.851111111,10.9844444 0.942777778,10.6455556 1.20833333,10.4905556 L3.85388889,8.96388889 C4.11944444,8.80888889 4.45888889,8.90055556 4.61277778,9.16777778 Z'
      }), react.createElement('path', {
        d: 'M6.03666667,11.1455556 L4.50888889,13.7938889 C4.355,14.0577778 4.01444444,14.1488889 3.74944444,13.995 C3.48444444,13.8411111 3.39277778,13.5027778 3.54666667,13.2366667 L5.07444444,10.59 C5.22833333,10.325 5.56777778,10.2355556 5.83333333,10.3872222 C6.09888889,10.5411111 6.18944444,10.8805556 6.03666667,11.1455556 Z'
      }), react.createElement('path', {
        d: 'M7.49944444,10.8344444 C7.80722222,10.8344444 8.05666667,11.0833333 8.05666667,11.3911111 L8.05666667,14.4455556 C8.05666667,14.7511111 7.80777778,15.0005556 7.49944444,15.0005556 C7.19277778,15.0005556 6.94388889,14.7522222 6.94388889,14.4455556 L6.94388889,11.3911111 C6.94388889,11.0833333 7.19222222,10.8344444 7.49944444,10.8344444 Z'
      }), react.createElement('path', {
        d: 'M9.92611111,10.59 L11.4527778,13.2366667 C11.6055556,13.5027778 11.5155556,13.8411111 11.25,13.995 C10.9838889,14.1483333 10.6438889,14.0572222 10.4905556,13.7938889 L8.96277778,11.1455556 C8.80944444,10.8805556 8.90111111,10.5411111 9.16666667,10.3872222 C9.43277778,10.2355556 9.77277778,10.325 9.92611111,10.59 Z'
      }), react.createElement('path', {
        d: 'M10.3866667,9.16777778 C10.54,8.90111111 10.8794444,8.80888889 11.145,8.96388889 L13.7922222,10.4905556 C14.0583333,10.6455556 14.1477778,10.9844444 13.9944444,11.2505556 C13.8416667,11.5166667 13.5011111,11.6061111 13.2333333,11.4538889 L10.5894444,9.92666667 C10.3238889,9.77222222 10.2338889,9.43277778 10.3866667,9.16777778 Z'
      }), react.createElement('path', {
        d: 'M14.4433333,6.94388889 L11.3872222,6.94388889 C11.0805556,6.94388889 10.8311111,7.19277778 10.8311111,7.5 C10.8311111,7.80666667 11.0794444,8.05555556 11.3872222,8.05555556 L14.4433333,8.05555556 C14.7511111,8.05555556 15,7.80666667 15,7.5 C15,7.19222222 14.7511111,6.94388889 14.4433333,6.94388889 Z'
      })
    ]));
  };
  renderTransaction = curry$(function(store, web3t, tran){
    var ref$, transactionInfo, coins, checked, arrow, arrowLg, sign, deletePendingTx, amountBeautify, ago, style, filterIcon, lang, menuStyle, borderStyle, lineStyle, lightStyle, lightText, icon1, tooltip, token, tx, amount, fee, time, url, type, pending, from, to, recipientType, description, coin, network, request, txDetails, iconPending, amountPending, about, aboutIcon, walletFrom, walletTo, cutHash, timeAgo, children;
    ref$ = historyFuncs(store, web3t), transactionInfo = ref$.transactionInfo, coins = ref$.coins, checked = ref$.checked, arrow = ref$.arrow, arrowLg = ref$.arrowLg, sign = ref$.sign, deletePendingTx = ref$.deletePendingTx, amountBeautify = ref$.amountBeautify, ago = ref$.ago;
    style = getPrimaryInfo(store);
    filterIcon = {
      filter: style.app.filterIcon
    };
    lang = getLang(store);
    menuStyle = {
      color: style.app.text
    };
    borderStyle = {
      borderBottom: "1px solid " + style.app.border
    };
    lineStyle = {
      background: style.app.wallet
    };
    lightStyle = {
      background: style.app.walletLight
    };
    lightText = {
      color: style.app.color3
    };
    icon1 = {
      filter: style.app.icon1
    };
    tooltip = {
      background: "#000"
    };
    token = tran.token, tx = tran.tx, amount = tran.amount, fee = tran.fee, time = tran.time, url = tran.url, type = tran.type, pending = tran.pending, from = tran.from, to = tran.to, recipientType = tran.recipientType, description = tran.description;
    coin = find(function(it){
      return it.token === token;
    })(
    coins);
    if (coin == null) {
      return null;
    }
    network = coin[store.current.network];
    request = {
      network: network,
      tx: tx
    };
    txDetails = function(){
      return store.history.txDetails = (function(){
        switch (false) {
        case store.history.txDetails !== tx:
          return null;
        default:
          return tx;
        }
      }());
    };
    iconPending = {
      filter: pending === true
        ? 'grayscale(100%) brightness(40%) sepia(100%) hue-rotate(-370deg) saturate(790%) contrast(0.5)'
        : style.app.iconFilter
    };
    amountPending = {
      color: pending === true ? 'orange' : ''
    };
    about = (function(){
      switch (false) {
      case recipientType !== 'contract':
        return 'Smart';
      case description !== 'internal':
        return 'Smart';
      case description !== 'external':
        return 'User';
      default:
        return 'Unknown';
      }
    }());
    aboutIcon = (function(){
      switch (false) {
      case recipientType !== 'contract':
        return icons.smart + "";
      case description !== 'internal':
        return icons.smart + "";
      case description !== 'external':
        return icons.user + "";
      default:
        return icons.unknown + "";
      }
    }());
    walletFrom = {
      address: from,
      network: network,
      coin: coin
    };
    walletTo = {
      address: to,
      network: network,
      coin: coin
    };
    cutHash = function(tx){
      var t, r;
      if (tx == null) {
        return 'none';
      }
      t = tx.toString();
      return r = t.substr(0, 15) + '..' + t.substr(t.length - 15, 15);
    };
    timeAgo = (function(){
      switch (false) {
      case !time:
        return ago(time);
      default:
        return "";
      }
    }());
    return react.createElement('div', {
      key: (tx + type) + "",
      style: borderStyle,
      className: type + " record"
    }, children = [
      react.createElement('div', {
        style: lineStyle,
        className: 'tx-top'
      }, children = [
        react.createElement('div', {
          className: 'cell text-center network'
        }, children = react.createElement('div', {
          className: 'direction label-icon'
        }, children = react.createElement('img', {
          src: arrowLg(type) + "",
          className: 'icon-svg'
        }))), react.createElement('div', {
          className: 'cell details-from'
        }, children = react.createElement('div', {
          style: lightText,
          className: 'gray'
        }, children = [
          react.createElement('span', {
            className: 'action'
          }, children = addressHolder({
            store: store,
            wallet: walletFrom
          })), false ? react.createElement('span', {
            className: 'from-to'
          }, children = [
            react.createElement('span', {
              className: 'smart-contract'
            }, children = [
              react.createElement('div', {
                className: 'tooltip'
              }, ' ' + about), react.createElement('img', {
                src: aboutIcon + "",
                className: 'help'
              })
            ]), react.createElement('span', {}, ' ' + lang.from)
          ]) : void 8
        ])), react.createElement('div', {
          className: 'cell details-to'
        }, children = react.createElement('div', {
          style: lightText,
          className: 'gray'
        }, children = [
          react.createElement('span', {
            className: 'action'
          }, children = addressHolder({
            store: store,
            wallet: walletTo
          })), false ? react.createElement('span', {
            className: 'from-to'
          }, children = [
            react.createElement('span', {
              className: 'smart-contract'
            }, children = [
              react.createElement('div', {
                className: 'tooltip'
              }, ' ' + about), react.createElement('img', {
                src: aboutIcon + "",
                className: 'help'
              })
            ]), react.createElement('span', {}, ' ' + lang.to)
          ]) : void 8
        ])), react.createElement('div', {
          className: 'cell created'
        }, children = react.createElement('div', {
          className: 'time-ago'
        }, ' ' + timeAgo)), react.createElement('div', {
          style: menuStyle,
          className: 'cell amount'
        }, children = [
          react.createElement('div', {
            title: amount + "",
            style: amountPending
          }, children = [
            react.createElement('span', {
              className: 'sign direction'
            }, ' ' + sign(type)), amountBeautify(amount, 8)
          ]), false ? react.createElement('div', {
            title: amount + "",
            style: amountPending
          }, children = react.createElement('div', {
            className: 'sign direction',
            id: 'span'
          }, ' ' + sign(type))) : void 8, false ? react.createElement('div', {
            style: lightText,
            className: 'gray'
          }, children = [
            react.createElement('span', {
              className: 'fee'
            }, ' ' + lang.fee + ':'), amountBeautify(fee, 10)
          ]) : void 8
        ]), react.createElement('div', {
          style: menuStyle,
          className: 'cell status'
        }, children = pending === true
          ? react.createElement('span', {}, children = [
            react.createElement('span', {
              className: 'bold confirmed'
            }, ' ' + lang.created), react.createElement('span', {
              className: 'bold'
            }, children = loader(store, web3t))
          ])
          : react.createElement('span', {}, children = react.createElement('span', {
            className: 'bold confirmed done'
          }, ' ' + lang.confirmed))), react.createElement('div', {
          onClick: txDetails,
          className: 'cell divider more'
        }, children = [
          react.createElement('img', {
            src: icons.arrowDown + "",
            style: icon1,
            className: 'icon-svg1 more'
          }), react.createElement('div', {
            style: tooltip,
            className: 'arrow_box'
          }, ' ' + lang.details)
        ])
      ]), store.history.txDetails === tx ? react.createElement('div', {
        style: lightStyle,
        onClick: transactionInfo(request),
        className: 'tx-middle'
      }, children = [
        react.createElement('div', {
          className: 'cell divider'
        }, children = false ? react.createElement('div', {
          className: 'direction'
        }, ' ' + arrow(type)) : void 8), react.createElement('div', {
          className: 'cell txhash'
        }, children = [
          react.createElement(MiddleEllipsis, {}, children = react.createElement('a', {
            href: url + "",
            target: "_blank"
          }, ' ' + tx)), react.createElement(CopyToClipboard, {
            text: tx + "",
            onCopy: copiedInform(store),
            style: filterIcon
          }, children = copy(store)), react.createElement('div', {
            style: lightText,
            className: 'gray'
          }, children = [
            react.createElement('span', {}, ' ' + lang.created + ':'), " " + timeAgo, pending === true
              ? react.createElement('span', {}, children = react.createElement('span', {
                onClick: deletePendingTx(tran),
                className: 'bold delete'
              }, ' ' + lang['delete']))
              : react.createElement('span', {}, children = react.createElement('span', {
                className: 'bold confirmed done'
              }, ' ' + lang.confirmed)), react.createElement('span', {
              className: 'smart-contract'
            }, children = [
              react.createElement('div', {
                className: 'tooltip'
              }, ' ' + about), react.createElement('img', {
                src: aboutIcon + "",
                className: 'help'
              })
            ])
          ])
        ]), react.createElement('div', {
          className: 'cell divider'
        }), react.createElement('div', {
          className: 'cell divider2'
        }, children = react.createElement('div', {
          style: lightText,
          className: 'gray'
        }, children = [
          react.createElement('span', {
            className: 'fee'
          }, ' ' + lang.fee + ':'), amountBeautify(fee, 10)
        ]))
      ]) : void 8
    ]);
  });
  module.exports = function(arg$){
    var store, web3t, ref$, goBack, switchTypeIn, switchTypeOut, coins, isActive, switchFilter, style, lang, headerStyle, icon2, headerStyleLight, buttonStyle, filterStyle, split, menuStyle, borderB, borderT, filterBody, inputStyle, buttonPrimary3Style, buttonPrimary1Style, lightText, nothingIcon, headerTableStyle, iconFilter, expandCollapse, length, rowRenderer, historyWidth, historyHeight, children, coin;
    store = arg$.store, web3t = arg$.web3t;
    ref$ = historyFuncs(store, web3t), goBack = ref$.goBack, switchTypeIn = ref$.switchTypeIn, switchTypeOut = ref$.switchTypeOut, coins = ref$.coins, isActive = ref$.isActive, switchFilter = ref$.switchFilter;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    headerStyle = {
      borderBottom: "1px solid " + style.app.border,
      color: style.app.text
    };
    icon2 = {
      filter: style.app.icon2
    };
    headerStyleLight = {
      color: style.app.text
    };
    buttonStyle = {
      color: style.app.text,
      borderRight: "1px solid " + style.app.border,
      borderLeft: "1px solid " + style.app.border
    };
    filterStyle = {
      background: style.app.header,
      fontWeight: "600"
    };
    split = {
      border: "1px solid " + style.app.border
    };
    menuStyle = {
      color: style.app.text
    };
    borderB = {
      borderBottom: "1px solid " + style.app.border
    };
    borderT = {
      borderTop: "1px solid " + style.app.border
    };
    filterBody = {
      border: "1px solid " + style.app.border,
      background: style.app.accountBg
    };
    inputStyle = {
      background: style.app.bgPrimaryLight,
      border: "1px solid " + style.app.border,
      color: style.app.text
    };
    buttonPrimary3Style = {
      border: "0",
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare
    };
    buttonPrimary1Style = {
      border: "0",
      color: style.app.text,
      background: style.app.primary1,
      backgroundColor: style.app.primary1Spare
    };
    lightText = {
      color: style.app.color3
    };
    nothingIcon = {
      filter: style.app.nothingIcon
    };
    headerTableStyle = {
      borderBottom: "1px solid " + style.app.border,
      background: style.app.walletLight
    };
    iconFilter = {
      filter: style.app.iconFilter
    };
    expandCollapse = function(){
      return store.history.filterOpen = !store.history.filterOpen;
    };
    length = store.transactions.applied.length;
    rowRenderer = function(arg$){
      var key, index, isScrolling, isVisible, style;
      key = arg$.key, index = arg$.index, isScrolling = arg$.isScrolling, isVisible = arg$.isVisible, style = arg$.style;
      return renderTransaction(store, web3t, store.transactions.applied[index]);
      return null;
    };
    historyWidth = store.current.size.width / 1.9;
    historyHeight = store.current.size.height - 200 - 60;
    return react.createElement('div', {
      className: 'normalheader history history-1307984925'
    }, children = [
      react.createElement('div', {
        style: headerStyleLight,
        className: 'header'
      }, children = [
        store.current.device === 'mobile' ? react.createElement('button', {
          onClick: goBack,
          style: buttonStyle,
          className: 'back'
        }, children = react.createElement('img', {
          src: icons.arrowLeft + "",
          className: 'icon-svg-arrow'
        })) : void 8, react.createElement('span', {
          className: 'head left h1'
        }, ' ' + lang.yourTransactions), react.createElement('span', {
          onClick: expandCollapse,
          className: 'head right'
        }, children = react.createElement('img', {
          src: icons.filter + "",
          style: icon2,
          className: 'icon-svg1'
        })), react.createElement('div', {
          className: 'table-header'
        }, children = [
          react.createElement('span', {
            className: 'from-to'
          }, children = [" " + lang.from, " /", " " + lang.to]), react.createElement('span', {
            className: 'created'
          }, ' ' + lang.created), react.createElement('span', {
            className: 'amount'
          }, ' ' + lang.amount), react.createElement('span', {
            className: 'status'
          }, ' ' + lang.status), react.createElement('span', {
            className: 'details'
          }, ' ' + lang.details)
        ]), store.history.filterOpen ? react.createElement('div', {
          style: filterBody,
          className: 'filter'
        }, children = [
          react.createElement('div', {
            style: borderB,
            className: 'top'
          }, children = [
            react.createElement('button', {
              onClick: switchTypeOut,
              className: isActive('OUT') + " OUT"
            }, children = react.createElement('img', {
              src: icons.send + "",
              className: 'icon-svg'
            })), react.createElement('div', {
              style: split
            }), react.createElement('button', {
              onClick: switchTypeIn,
              className: isActive('IN') + " IN"
            }, children = react.createElement('img', {
              src: icons.get + "",
              className: 'icon-svg'
            }))
          ]), react.createElement('div', {
            style: borderB,
            className: 'middle'
          }, children = [
            react.createElement('div', {}, children = react.createElement('input', {
              type: 'text',
              style: inputStyle,
              placeholder: lang.from + ""
            })), react.createElement('div', {}, children = react.createElement('input', {
              type: 'text',
              style: inputStyle,
              placeholder: lang.to + ""
            })), react.createElement('button', {
              onClick: '',
              style: buttonPrimary1Style
            }, children = react.createElement('span', {}, children = [
              react.createElement('img', {
                src: icons.apply + "",
                className: 'icon-svg-btn'
              }), " " + lang.btnApply
            ]))
          ]), react.createElement('div', {
            className: 'bottom'
          }, children = (function(){
            var i$, ref$, len$, results$ = [];
            for (i$ = 0, len$ = (ref$ = coins).length; i$ < len$; ++i$) {
              coin = ref$[i$];
              results$.push(react.createElement('button', {
                key: coin.token + "",
                style: filterStyle,
                onClick: switchFilter(coin.token),
                className: isActive(coin.token) + ""
              }, children = react.createElement('img', {
                src: coin.image + ""
              })));
            }
            return results$;
          }()))
        ]) : void 8
      ]), react.createElement('div', {}, children = [
        react.createElement('div', {
          style: borderT,
          className: 'table'
        }, children = map(renderTransaction(store, web3t))(
        take(20)(
        store.transactions.applied))), length === 0 ? react.createElement('div', {
          style: menuStyle,
          className: 'nothin-to-show'
        }, children = [
          react.createElement('img', {
            style: nothingIcon,
            src: icons.searchHistory + ""
          }), react.createElement('div', {
            className: 'head'
          }, ' ' + lang.nothingToShow)
        ]) : void 8
      ])
    ]);
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
